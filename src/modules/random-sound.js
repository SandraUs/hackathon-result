// src/modules/random-sound.js
import { Module } from "../core/module";

export class RandomSoundModule extends Module {
  constructor() {
    super("random-sound", "üéµ –ó–≤—É–∫–∏");
  }

  trigger() {
    this.showPanel();
  }

  showPanel() {
    const oldPanel = document.querySelector(".sound-panel");
    if (oldPanel) {
      oldPanel.remove();
    }

    const panel = document.createElement("div");
    panel.className = "sound-panel";

    panel.innerHTML = `
      <h3>–ó–≤—É–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å</h3>
      <button class="close-btn">√ó</button>
      
      <h4>–ù–æ—Ç—ã</h4>
      <button class="note-btn" data-freq="261">–î–æ</button>
      <button class="note-btn" data-freq="293">–†–µ</button>
      <button class="note-btn" data-freq="329">–ú–∏</button>
      <button class="note-btn" data-freq="349">–§–∞</button>
      <button class="note-btn" data-freq="392">–°–æ–ª—å</button>
      <button class="note-btn" data-freq="440">–õ—è</button>
      <button class="note-btn" data-freq="494">–°–∏</button>
      
      <h4>–≠—Ñ—Ñ–µ–∫—Ç—ã</h4>
        <button class="effect-btn">–ü–∏—Å–∫</button>
        <button class="effect-btn">–ú–æ–Ω–µ—Ç–∞</button>
        <button class="effect-btn">–û—à–∏–±–∫–∞</button>
        <button class="effect-btn">–£—Å–ø–µ—Ö</button>
        <button class="effect-btn">–õ–∞–∑–µ—Ä</button>

    `;

    document.body.appendChild(panel);
    this.setupButtons(panel);
  }

  setupButtons(panel) {
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeBtn = panel.querySelector(".close-btn");
    closeBtn.onclick = () => {
      panel.remove();
    };

    // –ö–Ω–æ–ø–∫–∏ –Ω–æ—Ç
    const noteButtons = panel.querySelectorAll(".note-btn");
    noteButtons.forEach((button) => {
      button.onclick = () => {
        const frequency = button.getAttribute("data-freq");
        this.playNote(frequency);

        button.style.backgroundColor = "#4CAF50";
        setTimeout(() => {
          button.style.backgroundColor = "#2196F3";
        }, 200);
      };
    });

    // –ö–Ω–æ–ø–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    const effectButtons = panel.querySelectorAll(".effect-btn");
    effectButtons.forEach((button) => {
      button.onclick = () => {
        const effectName = button.textContent;
        this.playEffect(effectName);

        button.style.backgroundColor = "#FF9800";
        setTimeout(() => {
          button.style.backgroundColor = "#9C27B0";
        }, 200);
      };
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–∞–Ω–µ–ª–∏
    setTimeout(() => {
      document.onclick = (event) => {
        if (!panel.contains(event.target)) {
          panel.remove();
          document.onclick = null;
        }
      };
    }, 100);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤—É–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã
  playNote(frequency) {
    const audioContext = new (window.AudioContext ||
      window.webkitAudioContext)();
    const oscillator = audioContext.createOscillator();
    const volume = audioContext.createGain();

    oscillator.connect(volume);
    volume.connect(audioContext.destination);

    oscillator.frequency.value = frequency;
    oscillator.type = "sine";

    volume.gain.setValueAtTime(0.1, audioContext.currentTime);
    volume.gain.exponentialRampToValueAtTime(
      0.01,
      audioContext.currentTime + 0.5
    );

    oscillator.start();
    oscillator.stop(audioContext.currentTime + 0.5);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  playEffect(effectName) {
    if (effectName === "–ü–∏—Å–∫") {
      this.playNote(800);
      setTimeout(() => this.playNote(800), 150);
      setTimeout(() => this.playNote(800), 300);
    }

    if (effectName === "–ú–æ–Ω–µ—Ç–∞") {
      this.playNote(523);
      setTimeout(() => this.playNote(659), 100);
    }

    if (effectName === "–û—à–∏–±–∫–∞") {
      this.playNote(300);
      setTimeout(() => this.playNote(200), 150);
    }

    if (effectName === "–£—Å–ø–µ—Ö") {
      this.playNote(523);
      setTimeout(() => this.playNote(659), 150);
      setTimeout(() => this.playNote(784), 300);
    }

    if (effectName === "–õ–∞–∑–µ—Ä") {
      let freq = 1200;
      const step = setInterval(() => {
        this.playNote(freq);
        freq -= 100;
        if (freq < 200) clearInterval(step);
      }, 50);
    }
  }
}
